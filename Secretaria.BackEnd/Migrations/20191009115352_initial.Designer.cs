// <auto-generated />
using System;
using DominioSecretaria.ADO;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Secretaria.BackEnd.Migrations
{
    [DbContext(typeof(Contexto))]
    [Migration("20191009115352_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854");

            modelBuilder.Entity("DominioSecretaria.Escuela.Alumno", b =>
                {
                    b.Property<int>("legajo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("legajoAlumno");

                    b.Property<int>("Folio")
                        .HasColumnName("folio");

                    b.Property<int>("Libro")
                        .HasColumnName("libro");

                    b.Property<int>("idCursoActual");

                    b.Property<int>("idPersona");

                    b.HasKey("legajo");

                    b.HasIndex("idCursoActual");

                    b.HasIndex("idPersona");

                    b.ToTable("Alumno");
                });

            modelBuilder.Entity("DominioSecretaria.Escuela.Cursada", b =>
                {
                    b.Property<int>("idCursada")
                        .ValueGeneratedOnAdd();

                    b.Property<short>("CicloLectivo")
                        .HasColumnName("cicloLectivo");

                    b.Property<DateTime>("Fecha")
                        .HasColumnName("fecha");

                    b.Property<int>("idCurso");

                    b.Property<int>("legajoAlumno");

                    b.HasKey("idCursada");

                    b.HasIndex("idCurso");

                    b.HasIndex("legajoAlumno");

                    b.ToTable("Cursada");
                });

            modelBuilder.Entity("DominioSecretaria.Escuela.Curso", b =>
                {
                    b.Property<int>("IdCurso")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idCurso");

                    b.Property<byte>("Anio")
                        .HasColumnName("anio");

                    b.Property<byte>("Division")
                        .HasColumnName("division");

                    b.HasKey("IdCurso");

                    b.ToTable("Curso");
                });

            modelBuilder.Entity("DominioSecretaria.Escuela.Seguimiento", b =>
                {
                    b.Property<int>("IdSeguimiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idSeguimiento");

                    b.Property<DateTime>("Fecha")
                        .HasColumnName("fecha")
                        .HasColumnType("Date");

                    b.Property<string>("Observacion")
                        .IsRequired()
                        .HasColumnName("observacion")
                        .HasMaxLength(250);

                    b.Property<int>("legajo");

                    b.HasKey("IdSeguimiento");

                    b.HasIndex("legajo");

                    b.ToTable("seguimiento");
                });

            modelBuilder.Entity("DominioSecretaria.Escuela.TipoTutor", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnName("idTipoTutor");

                    b.Property<string>("Cadena")
                        .HasColumnName("tipoTutor")
                        .HasMaxLength(45);

                    b.HasKey("Id");

                    b.HasIndex("Cadena")
                        .IsUnique();

                    b.ToTable("tipoTutor");
                });

            modelBuilder.Entity("DominioSecretaria.Escuela.Tutor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("idPersona");

                    b.Property<byte>("idTipoTutor");

                    b.Property<int>("legajo");

                    b.HasKey("Id");

                    b.HasIndex("idPersona");

                    b.HasIndex("idTipoTutor");

                    b.HasIndex("legajo");

                    b.ToTable("tutor");
                });

            modelBuilder.Entity("DominioSecretaria.Faltas.AsistenciaCurso", b =>
                {
                    b.Property<int>("IdAsistenciaCurso")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idAsistenciaCurso");

                    b.Property<DateTime>("Fecha")
                        .HasColumnName("fecha");

                    b.Property<int>("idCurso");

                    b.Property<byte>("idTipoFalta");

                    b.HasKey("IdAsistenciaCurso");

                    b.HasIndex("idCurso");

                    b.HasIndex("idTipoFalta");

                    b.ToTable("AsisienciaCurso");
                });

            modelBuilder.Entity("DominioSecretaria.Faltas.Falta", b =>
                {
                    b.Property<int>("IdFalta")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idFalta");

                    b.Property<DateTime>("Fecha")
                        .HasColumnName("fecha");

                    b.Property<bool>("Justificada")
                        .HasColumnName("justificada");

                    b.Property<float>("ValorFalta")
                        .HasColumnName("valorFalta");

                    b.Property<int>("idAlumno");

                    b.Property<int>("idCursada");

                    b.Property<byte>("idTipoAusencia");

                    b.Property<byte>("idTipoFalta");

                    b.HasKey("IdFalta");

                    b.HasIndex("idAlumno");

                    b.HasIndex("idCursada");

                    b.HasIndex("idTipoAusencia");

                    b.HasIndex("idTipoFalta");

                    b.ToTable("Falta");
                });

            modelBuilder.Entity("DominioSecretaria.Faltas.TipoAusencia", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnName("idTipoAusencia");

                    b.Property<string>("Cadena")
                        .IsRequired()
                        .HasColumnName("tipoAusencia")
                        .HasMaxLength(30);

                    b.Property<float>("ValorFalta")
                        .HasColumnName("valorFalta");

                    b.HasKey("Id");

                    b.HasIndex("Cadena")
                        .IsUnique();

                    b.ToTable("TipoAusencia");
                });

            modelBuilder.Entity("DominioSecretaria.Faltas.TipoFalta", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnName("idTipoFalta");

                    b.Property<string>("Cadena")
                        .HasColumnName("tipoFalta")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("Cadena")
                        .IsUnique();

                    b.ToTable("tipoFalta");
                });

            modelBuilder.Entity("DominioSecretaria.InfoPersonal.Domicilio", b =>
                {
                    b.Property<int>("IdDomicilio")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idDomicilio");

                    b.Property<int?>("Altura")
                        .HasColumnName("altura");

                    b.Property<string>("Calle")
                        .IsRequired()
                        .HasColumnName("Calle")
                        .HasMaxLength(45);

                    b.Property<string>("CodigoPostal")
                        .HasColumnName("codigoPostal")
                        .HasMaxLength(8);

                    b.Property<string>("Departamento")
                        .HasColumnName("departamento")
                        .HasMaxLength(3);

                    b.Property<byte?>("Piso")
                        .HasColumnName("piso");

                    b.Property<byte>("idLocalidad");

                    b.Property<string>("observacionDomicilio")
                        .HasColumnName("observacionDomicilio")
                        .HasMaxLength(60);

                    b.HasKey("IdDomicilio");

                    b.HasIndex("idLocalidad");

                    b.ToTable("Domicilio");
                });

            modelBuilder.Entity("DominioSecretaria.InfoPersonal.Localidad", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnName("idLocalidad");

                    b.Property<string>("Cadena")
                        .HasColumnName("localidad")
                        .HasMaxLength(45);

                    b.HasKey("Id");

                    b.HasIndex("Cadena")
                        .IsUnique();

                    b.ToTable("Localidad");
                });

            modelBuilder.Entity("DominioSecretaria.InfoPersonal.Nacionalidad", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnName("idNacionalidad");

                    b.Property<string>("Cadena")
                        .HasColumnName("nacionalidad")
                        .HasMaxLength(45);

                    b.HasKey("Id");

                    b.HasIndex("Cadena")
                        .IsUnique();

                    b.ToTable("Nacionalidad");
                });

            modelBuilder.Entity("DominioSecretaria.InfoPersonal.Persona", b =>
                {
                    b.Property<int>("IdPersona")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idPersona");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnName("apellido")
                        .HasMaxLength(45);

                    b.Property<string>("Mail")
                        .HasColumnName("mail")
                        .HasMaxLength(60);

                    b.Property<DateTime>("Nacimiento")
                        .HasColumnName("nacimiento")
                        .HasColumnType("Date");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnName("nombre")
                        .HasMaxLength(45);

                    b.Property<int>("NroDocumento")
                        .HasColumnName("nroDocumento");

                    b.Property<long?>("Telefono1")
                        .HasColumnName("telelfono1");

                    b.Property<long?>("Telefono2")
                        .HasColumnName("telefono2");

                    b.Property<int>("idDomicilio");

                    b.Property<byte>("idNacionalidad");

                    b.Property<byte>("idTipoDocumento");

                    b.HasKey("IdPersona");

                    b.HasIndex("idDomicilio");

                    b.HasIndex("idNacionalidad");

                    b.HasIndex("idTipoDocumento");

                    b.ToTable("Persona");
                });

            modelBuilder.Entity("DominioSecretaria.InfoPersonal.TipoDocumento", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnName("idTipoDocumento");

                    b.Property<string>("Cadena")
                        .HasColumnName("tipoDocumento")
                        .HasMaxLength(45);

                    b.HasKey("Id");

                    b.HasIndex("Cadena")
                        .IsUnique();

                    b.ToTable("TipoDocumento");
                });

            modelBuilder.Entity("DominioSecretaria.Escuela.Alumno", b =>
                {
                    b.HasOne("DominioSecretaria.Escuela.Curso", "CursoActual")
                        .WithMany("Alumnos")
                        .HasForeignKey("idCursoActual")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DominioSecretaria.InfoPersonal.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("idPersona")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DominioSecretaria.Escuela.Cursada", b =>
                {
                    b.HasOne("DominioSecretaria.Escuela.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("idCurso")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DominioSecretaria.Escuela.Alumno", "Alumno")
                        .WithMany("Cursadas")
                        .HasForeignKey("legajoAlumno")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DominioSecretaria.Escuela.Seguimiento", b =>
                {
                    b.HasOne("DominioSecretaria.Escuela.Alumno", "Alumno")
                        .WithMany("Seguimientos")
                        .HasForeignKey("legajo")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DominioSecretaria.Escuela.Tutor", b =>
                {
                    b.HasOne("DominioSecretaria.InfoPersonal.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("idPersona")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DominioSecretaria.Escuela.TipoTutor", "TipoTutor")
                        .WithMany()
                        .HasForeignKey("idTipoTutor")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DominioSecretaria.Escuela.Alumno", "Alumno")
                        .WithMany("Tutores")
                        .HasForeignKey("legajo")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DominioSecretaria.Faltas.AsistenciaCurso", b =>
                {
                    b.HasOne("DominioSecretaria.Escuela.Curso", "Curso")
                        .WithMany("AsistenciaCurso")
                        .HasForeignKey("idCurso")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DominioSecretaria.Faltas.TipoFalta", "TipoFalta")
                        .WithMany("AsistenciaCurso")
                        .HasForeignKey("idTipoFalta")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DominioSecretaria.Faltas.Falta", b =>
                {
                    b.HasOne("DominioSecretaria.Escuela.Alumno", "Alumno")
                        .WithMany("Faltas")
                        .HasForeignKey("idAlumno")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DominioSecretaria.Escuela.Cursada", "Cursada")
                        .WithMany("Faltas")
                        .HasForeignKey("idCursada")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DominioSecretaria.Faltas.TipoAusencia", "TipoAusencia")
                        .WithMany("Faltas")
                        .HasForeignKey("idTipoAusencia")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DominioSecretaria.Faltas.TipoFalta", "TipoFalta")
                        .WithMany("Faltas")
                        .HasForeignKey("idTipoFalta")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DominioSecretaria.InfoPersonal.Domicilio", b =>
                {
                    b.HasOne("DominioSecretaria.InfoPersonal.Localidad", "Localidad")
                        .WithMany()
                        .HasForeignKey("idLocalidad")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DominioSecretaria.InfoPersonal.Persona", b =>
                {
                    b.HasOne("DominioSecretaria.InfoPersonal.Domicilio", "Domicilio")
                        .WithMany()
                        .HasForeignKey("idDomicilio")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DominioSecretaria.InfoPersonal.Nacionalidad", "Nacionalidad")
                        .WithMany()
                        .HasForeignKey("idNacionalidad")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DominioSecretaria.InfoPersonal.TipoDocumento", "TipoDocumento")
                        .WithMany()
                        .HasForeignKey("idTipoDocumento")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
